// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	open_search_client "github.com/greenbone/opensight-golang-libraries/pkg/openSearch/open_search_client"
	opensearch "github.com/opensearch-project/opensearch-go"
	mock "github.com/stretchr/testify/mock"
)

// OpenSearchClientWithIndex is an autogenerated mock type for the OpenSearchClientWithIndex type
type OpenSearchClientWithIndex[T open_search_client.Identifiable] struct {
	mock.Mock
}

type OpenSearchClientWithIndex_Expecter[T open_search_client.Identifiable] struct {
	mock *mock.Mock
}

func (_m *OpenSearchClientWithIndex[T]) EXPECT() *OpenSearchClientWithIndex_Expecter[T] {
	return &OpenSearchClientWithIndex_Expecter[T]{mock: &_m.Mock}
}

// AsyncDeleteByQuery provides a mock function with given fields: body
func (_m *OpenSearchClientWithIndex[T]) AsyncDeleteByQuery(body open_search_client.Json) error {
	ret := _m.Called(body)

	var r0 error
	if rf, ok := ret.Get(0).(func(open_search_client.Json) error); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenSearchClientWithIndex_AsyncDeleteByQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncDeleteByQuery'
type OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// AsyncDeleteByQuery is a helper method to define mock.On call
//   - body open_search_client.Json
func (_e *OpenSearchClientWithIndex_Expecter[T]) AsyncDeleteByQuery(body interface{}) *OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T] {
	return &OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T]{Call: _e.mock.On("AsyncDeleteByQuery", body)}
}

func (_c *OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T]) Run(run func(body open_search_client.Json)) *OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(open_search_client.Json))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T]) Return(_a0 error) *OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T]) RunAndReturn(run func(open_search_client.Json) error) *OpenSearchClientWithIndex_AsyncDeleteByQuery_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: id
func (_m *OpenSearchClientWithIndex[T]) DeleteById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenSearchClientWithIndex_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type OpenSearchClientWithIndex_DeleteById_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - id string
func (_e *OpenSearchClientWithIndex_Expecter[T]) DeleteById(id interface{}) *OpenSearchClientWithIndex_DeleteById_Call[T] {
	return &OpenSearchClientWithIndex_DeleteById_Call[T]{Call: _e.mock.On("DeleteById", id)}
}

func (_c *OpenSearchClientWithIndex_DeleteById_Call[T]) Run(run func(id string)) *OpenSearchClientWithIndex_DeleteById_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_DeleteById_Call[T]) Return(_a0 error) *OpenSearchClientWithIndex_DeleteById_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenSearchClientWithIndex_DeleteById_Call[T]) RunAndReturn(run func(string) error) *OpenSearchClientWithIndex_DeleteById_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DeleteByQuery provides a mock function with given fields: body
func (_m *OpenSearchClientWithIndex[T]) DeleteByQuery(body open_search_client.Json) error {
	ret := _m.Called(body)

	var r0 error
	if rf, ok := ret.Get(0).(func(open_search_client.Json) error); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenSearchClientWithIndex_DeleteByQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByQuery'
type OpenSearchClientWithIndex_DeleteByQuery_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// DeleteByQuery is a helper method to define mock.On call
//   - body open_search_client.Json
func (_e *OpenSearchClientWithIndex_Expecter[T]) DeleteByQuery(body interface{}) *OpenSearchClientWithIndex_DeleteByQuery_Call[T] {
	return &OpenSearchClientWithIndex_DeleteByQuery_Call[T]{Call: _e.mock.On("DeleteByQuery", body)}
}

func (_c *OpenSearchClientWithIndex_DeleteByQuery_Call[T]) Run(run func(body open_search_client.Json)) *OpenSearchClientWithIndex_DeleteByQuery_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(open_search_client.Json))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_DeleteByQuery_Call[T]) Return(_a0 error) *OpenSearchClientWithIndex_DeleteByQuery_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenSearchClientWithIndex_DeleteByQuery_Call[T]) RunAndReturn(run func(open_search_client.Json) error) *OpenSearchClientWithIndex_DeleteByQuery_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function with given fields:
func (_m *OpenSearchClientWithIndex[T]) GetClient() *opensearch.Client {
	ret := _m.Called()

	var r0 *opensearch.Client
	if rf, ok := ret.Get(0).(func() *opensearch.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearch.Client)
		}
	}

	return r0
}

// OpenSearchClientWithIndex_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type OpenSearchClientWithIndex_GetClient_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *OpenSearchClientWithIndex_Expecter[T]) GetClient() *OpenSearchClientWithIndex_GetClient_Call[T] {
	return &OpenSearchClientWithIndex_GetClient_Call[T]{Call: _e.mock.On("GetClient")}
}

func (_c *OpenSearchClientWithIndex_GetClient_Call[T]) Run(run func()) *OpenSearchClientWithIndex_GetClient_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_GetClient_Call[T]) Return(_a0 *opensearch.Client) *OpenSearchClientWithIndex_GetClient_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenSearchClientWithIndex_GetClient_Call[T]) RunAndReturn(run func() *opensearch.Client) *OpenSearchClientWithIndex_GetClient_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: document
func (_m *OpenSearchClientWithIndex[T]) Save(document T) error {
	ret := _m.Called(document)

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenSearchClientWithIndex_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type OpenSearchClientWithIndex_Save_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - document T
func (_e *OpenSearchClientWithIndex_Expecter[T]) Save(document interface{}) *OpenSearchClientWithIndex_Save_Call[T] {
	return &OpenSearchClientWithIndex_Save_Call[T]{Call: _e.mock.On("Save", document)}
}

func (_c *OpenSearchClientWithIndex_Save_Call[T]) Run(run func(document T)) *OpenSearchClientWithIndex_Save_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_Save_Call[T]) Return(_a0 error) *OpenSearchClientWithIndex_Save_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenSearchClientWithIndex_Save_Call[T]) RunAndReturn(run func(T) error) *OpenSearchClientWithIndex_Save_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SaveToIndex provides a mock function with given fields: indexName, documents
func (_m *OpenSearchClientWithIndex[T]) SaveToIndex(indexName string, documents []T) error {
	ret := _m.Called(indexName, documents)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []T) error); ok {
		r0 = rf(indexName, documents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenSearchClientWithIndex_SaveToIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToIndex'
type OpenSearchClientWithIndex_SaveToIndex_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// SaveToIndex is a helper method to define mock.On call
//   - indexName string
//   - documents []T
func (_e *OpenSearchClientWithIndex_Expecter[T]) SaveToIndex(indexName interface{}, documents interface{}) *OpenSearchClientWithIndex_SaveToIndex_Call[T] {
	return &OpenSearchClientWithIndex_SaveToIndex_Call[T]{Call: _e.mock.On("SaveToIndex", indexName, documents)}
}

func (_c *OpenSearchClientWithIndex_SaveToIndex_Call[T]) Run(run func(indexName string, documents []T)) *OpenSearchClientWithIndex_SaveToIndex_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]T))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_SaveToIndex_Call[T]) Return(_a0 error) *OpenSearchClientWithIndex_SaveToIndex_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenSearchClientWithIndex_SaveToIndex_Call[T]) RunAndReturn(run func(string, []T) error) *OpenSearchClientWithIndex_SaveToIndex_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: body
func (_m *OpenSearchClientWithIndex[T]) Search(body open_search_client.Json) (*open_search_client.SearchResponse[T], error) {
	ret := _m.Called(body)

	var r0 *open_search_client.SearchResponse[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(open_search_client.Json) (*open_search_client.SearchResponse[T], error)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(open_search_client.Json) *open_search_client.SearchResponse[T]); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*open_search_client.SearchResponse[T])
		}
	}

	if rf, ok := ret.Get(1).(func(open_search_client.Json) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenSearchClientWithIndex_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type OpenSearchClientWithIndex_Search_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - body open_search_client.Json
func (_e *OpenSearchClientWithIndex_Expecter[T]) Search(body interface{}) *OpenSearchClientWithIndex_Search_Call[T] {
	return &OpenSearchClientWithIndex_Search_Call[T]{Call: _e.mock.On("Search", body)}
}

func (_c *OpenSearchClientWithIndex_Search_Call[T]) Run(run func(body open_search_client.Json)) *OpenSearchClientWithIndex_Search_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(open_search_client.Json))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_Search_Call[T]) Return(_a0 *open_search_client.SearchResponse[T], _a1 error) *OpenSearchClientWithIndex_Search_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenSearchClientWithIndex_Search_Call[T]) RunAndReturn(run func(open_search_client.Json) (*open_search_client.SearchResponse[T], error)) *OpenSearchClientWithIndex_Search_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SearchOne provides a mock function with given fields: body
func (_m *OpenSearchClientWithIndex[T]) SearchOne(body open_search_client.Json) (*T, error) {
	ret := _m.Called(body)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(open_search_client.Json) (*T, error)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(open_search_client.Json) *T); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(open_search_client.Json) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenSearchClientWithIndex_SearchOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchOne'
type OpenSearchClientWithIndex_SearchOne_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// SearchOne is a helper method to define mock.On call
//   - body open_search_client.Json
func (_e *OpenSearchClientWithIndex_Expecter[T]) SearchOne(body interface{}) *OpenSearchClientWithIndex_SearchOne_Call[T] {
	return &OpenSearchClientWithIndex_SearchOne_Call[T]{Call: _e.mock.On("SearchOne", body)}
}

func (_c *OpenSearchClientWithIndex_SearchOne_Call[T]) Run(run func(body open_search_client.Json)) *OpenSearchClientWithIndex_SearchOne_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(open_search_client.Json))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_SearchOne_Call[T]) Return(_a0 *T, _a1 error) *OpenSearchClientWithIndex_SearchOne_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenSearchClientWithIndex_SearchOne_Call[T]) RunAndReturn(run func(open_search_client.Json) (*T, error)) *OpenSearchClientWithIndex_SearchOne_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SearchString provides a mock function with given fields: body
func (_m *OpenSearchClientWithIndex[T]) SearchString(body string) (*open_search_client.SearchResponse[T], error) {
	ret := _m.Called(body)

	var r0 *open_search_client.SearchResponse[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*open_search_client.SearchResponse[T], error)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(string) *open_search_client.SearchResponse[T]); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*open_search_client.SearchResponse[T])
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenSearchClientWithIndex_SearchString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchString'
type OpenSearchClientWithIndex_SearchString_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// SearchString is a helper method to define mock.On call
//   - body string
func (_e *OpenSearchClientWithIndex_Expecter[T]) SearchString(body interface{}) *OpenSearchClientWithIndex_SearchString_Call[T] {
	return &OpenSearchClientWithIndex_SearchString_Call[T]{Call: _e.mock.On("SearchString", body)}
}

func (_c *OpenSearchClientWithIndex_SearchString_Call[T]) Run(run func(body string)) *OpenSearchClientWithIndex_SearchString_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_SearchString_Call[T]) Return(_a0 *open_search_client.SearchResponse[T], _a1 error) *OpenSearchClientWithIndex_SearchString_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenSearchClientWithIndex_SearchString_Call[T]) RunAndReturn(run func(string) (*open_search_client.SearchResponse[T], error)) *OpenSearchClientWithIndex_SearchString_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function with given fields: id, body
func (_m *OpenSearchClientWithIndex[T]) UpdateById(id string, body map[string]interface{}) error {
	ret := _m.Called(id, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(id, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenSearchClientWithIndex_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type OpenSearchClientWithIndex_UpdateById_Call[T open_search_client.Identifiable] struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - id string
//   - body map[string]interface{}
func (_e *OpenSearchClientWithIndex_Expecter[T]) UpdateById(id interface{}, body interface{}) *OpenSearchClientWithIndex_UpdateById_Call[T] {
	return &OpenSearchClientWithIndex_UpdateById_Call[T]{Call: _e.mock.On("UpdateById", id, body)}
}

func (_c *OpenSearchClientWithIndex_UpdateById_Call[T]) Run(run func(id string, body map[string]interface{})) *OpenSearchClientWithIndex_UpdateById_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *OpenSearchClientWithIndex_UpdateById_Call[T]) Return(_a0 error) *OpenSearchClientWithIndex_UpdateById_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenSearchClientWithIndex_UpdateById_Call[T]) RunAndReturn(run func(string, map[string]interface{}) error) *OpenSearchClientWithIndex_UpdateById_Call[T] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewOpenSearchClientWithIndex interface {
	mock.TestingT
	Cleanup(func())
}

// NewOpenSearchClientWithIndex creates a new instance of OpenSearchClientWithIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOpenSearchClientWithIndex[T open_search_client.Identifiable](t mockConstructorTestingTNewOpenSearchClientWithIndex) *OpenSearchClientWithIndex[T] {
	mock := &OpenSearchClientWithIndex[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
